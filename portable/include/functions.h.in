#ifndef XADMASTER_FUNCTIONS_H
#define XADMASTER_FUNCTIONS_H

/*  $Id: functions.h.in,v 1.11 2005/06/23 14:54:42 stoecker Exp $
    declarations and prototypes

    XAD library system for archive handling
    Copyright (C) 1998 and later by Dirk Stöcker <soft@dstoecker.de>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/* xadmaster.h is included without its public library prototypes, so we
 * can define them ourselves using xadMasterBaseP instead of xadMasterBase */
#define XAD_NO_PROTOTYPES 1
#include <xadmaster.h>

/* include all library-internal structures, including xadMasterBaseP */
#include <privdefs.h>

/************************************************************************
*                                                                       *
*    library accessable function                                        *
*                                                                       *
************************************************************************/

/* <INSERT> */

PROTOHOOK(InHookFH);       /* hook_fh.c */
PROTOHOOK(OutHookFH);      /* hook_fh.c */
PROTOHOOK(InHookMem);      /* hook_mem.c */
PROTOHOOK(OutHookMem);     /* hook_mem.c */
PROTOHOOK(InHookStream);   /* hook_stream.c */
PROTOHOOK(OutHookStream);  /* hook_stream.c */
PROTOHOOK(InHookDisk);     /* hook_disk.c */
PROTOHOOK(OutHookDisk);    /* hook_disk.c */
PROTOHOOK(InHookSplitted); /* hook_splitted.c */
PROTOHOOK(InHookDiskArc);  /* hook_diskarc.c */

/* clientfunc.c */
xadUINT32 callprogress(
                const struct xadArchiveInfoP *ai,
                xadUINT32 stat, xadUINT32 mode,
                struct xadMasterBaseP *xadMasterBase);

xadUINT32 callprogressFN(
                const struct xadArchiveInfoP *ai,
                xadUINT32 stat, xadUINT32 mode, xadSTRPTR *filename,
                struct xadMasterBaseP *xadMasterBase);

xadSignSize getskipsize(
                xadSignSize data,
                const struct xadArchiveInfoP *ai);

xadBOOL xadAddClients(struct xadMasterBaseP *xadMasterBase,
                      const struct xadClient *clients,
                      xadUINT32 add_flags);

void xadFreeClients(struct xadMasterBaseP *xadMasterBase);

void MakeCRC16(xadUINT16 *buf, xadUINT16 ID);
void MakeCRC32(xadUINT32 *buf, xadUINT32 ID);

extern const struct xadClient * const RealFirstClient;

#ifdef DEBUG
void DebugFlagged(xadUINT32 flags, const xadSTRING *fmt, ...);

void DebugTagList(const xadSTRING *, xadTAGPTR, ...);           /* print with 'R' and tags with 'T' */
void DebugTagListOther(const xadSTRING *, xadTAGPTR, ...);      /* print with 'O' and tags with 'T' */
void DebugTagListMem(const xadSTRING *, xadTAGPTR, ...);        /* print with 'R' or 'M' and tags with 'T' */
void DebugError(const xadSTRING *, ...);                        /* print with 'E' */
void DebugHook(const xadSTRING *, ...);                         /* print with 'H' */
void DebugHookTagList(const xadSTRING *, xadTAGPTR, ...);       /* print with 'H' and tags with 'T' */
void DebugRunTime(const xadSTRING *, ...);                      /* print with 'R' */
void DebugOther(const xadSTRING *, ...);                        /* print with 'O' */
void DebugMem(const xadSTRING *, ...);                          /* print with 'M' */
void DebugMemError(const xadSTRING *, ...);                     /* print with 'M' or 'E' */
void DebugFileSearched(const struct xadArchiveInfo *ai, const xadSTRING *, ...); /* print with 'D' */
void DebugClient(const struct xadArchiveInfo *ai, const xadSTRING *, ...);       /* print with 'D' */
#endif
#ifdef DEBUGRESOURCE
#define XADOBJCOOKIE 0x58414494
void DebugResource(struct xadMasterBaseP *, const xadSTRING *, ...);       /* print with 'C' */
/* called with 0 does end result check for this task */
/* called with 1 does end result check for all tasks */
#endif
#if defined(DEBUG) || defined(DEBUGRESOURCE)
#define DEBUGFLAG_ERROR         (1<<0)
#define DEBUGFLAG_RUNTIME       (1<<1)
#define DEBUGFLAG_TAGLIST       (1<<2)
#define DEBUGFLAG_HOOK          (1<<3)
#define DEBUGFLAG_OTHER         (1<<4)
#define DEBUGFLAG_MEM           (1<<5)
#define DEBUGFLAG_FLAGS         (1<<6)
#define DEBUGFLAG_RESOURCE      (1<<7)
#define DEBUGFLAG_CLIENT        (1<<8)
#define DEBUGFLAG_SEARCHED      (1<<9)
#define DEBUGFLAG_STATIC        (1<<10)
#define DEBUGFLAG_CONTINUESTART (1<<11)
#define DEBUGFLAG_CONTINUE      (1<<12)
#define DEBUGFLAG_CONTINUEEND   (1<<13)

#ifdef AMIGA
extern struct ExecBase * SysBase;
extern struct DosLibrary * DOSBase;
extern struct UtilityBase * UtilityBase;
extern struct xadMasterBase * xadMasterBase;
#endif /* AMIGA */

xadSTRPTR xadGetObjectTypeName(xadUINT32 type); /* objects.c */
#endif

#endif /* XADMASTER_FUNCTIONS_H */
